/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package prototipo;

import com.sun.xml.internal.ws.api.streaming.XMLStreamReaderFactory;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Locale;
import java.util.Set;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author xavi
 */
public class es_protot extends javax.swing.JFrame {

    String url = "jdbc:derby://localhost:1527/DBES";
    Connection con;
    DefaultTableModel model;
    String sql;
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
    
    /**
     * Creates new form es_protot
     */
    public es_protot() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialogPedido = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jComboCliente = new javax.swing.JComboBox();
        jComboTipoServico = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaDescricao = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btguardar = new javax.swing.JButton();
        btcancelar = new javax.swing.JButton();
        btaddhorario = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTablePreferencias = new javax.swing.JTable();
        jDialogPreferencia = new javax.swing.JDialog();
        jDateChooserDI = new com.toedter.calendar.JDateChooser();
        jDateChooserDF = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTexHIinicio = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jTextHF = new javax.swing.JTextField();
        BTGuardar = new javax.swing.JButton();
        BTCancel = new javax.swing.JButton();
        jDialogConsultarPedidos = new javax.swing.JDialog();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableConsPedidos = new javax.swing.JTable();
        jbVoiltar = new javax.swing.JButton();
        jbNovoCP = new javax.swing.JButton();
        jbTerminar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jbEntrar = new javax.swing.JButton();
        jbConsultarPedidos = new javax.swing.JButton();

        jDialogPedido.setMinimumSize(new java.awt.Dimension(400, 400));

        jLabel1.setText("Descrição");

        jTextAreaDescricao.setColumns(20);
        jTextAreaDescricao.setRows(5);
        jScrollPane1.setViewportView(jTextAreaDescricao);

        jLabel3.setText("Cliente");

        jLabel4.setText("Tipo de serviço");

        btguardar.setText("Guardar");
        btguardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btguardarActionPerformed(evt);
            }
        });

        btcancelar.setText("Cancelar");
        btcancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btcancelarActionPerformed(evt);
            }
        });

        btaddhorario.setText("Adicionar Horario");
        btaddhorario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btaddhorarioActionPerformed(evt);
            }
        });

        jTablePreferencias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Data inicio", "Data fim"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTablePreferencias);

        javax.swing.GroupLayout jDialogPedidoLayout = new javax.swing.GroupLayout(jDialogPedido.getContentPane());
        jDialogPedido.getContentPane().setLayout(jDialogPedidoLayout);
        jDialogPedidoLayout.setHorizontalGroup(
            jDialogPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogPedidoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jDialogPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jDialogPedidoLayout.createSequentialGroup()
                        .addComponent(btguardar)
                        .addGap(288, 288, 288))
                    .addGroup(jDialogPedidoLayout.createSequentialGroup()
                        .addGroup(jDialogPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jDialogPedidoLayout.createSequentialGroup()
                                .addGroup(jDialogPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGroup(jDialogPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jDialogPedidoLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel2))
                                    .addGroup(jDialogPedidoLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jDialogPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jComboTipoServico, 0, 134, Short.MAX_VALUE)
                                            .addComponent(jComboCliente, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(jDialogPedidoLayout.createSequentialGroup()
                                        .addGap(34, 34, 34)
                                        .addComponent(btcancelar)
                                        .addGap(41, 41, 41)
                                        .addComponent(btaddhorario))
                                    .addGroup(jDialogPedidoLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(18, 18, 18))))
        );
        jDialogPedidoLayout.setVerticalGroup(
            jDialogPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogPedidoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDialogPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jDialogPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboTipoServico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jDialogPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jDialogPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btguardar)
                    .addComponent(btcancelar)
                    .addComponent(btaddhorario))
                .addContainerGap())
        );

        jDialogPreferencia.setMinimumSize(new java.awt.Dimension(300, 300));

        jDateChooserDI.setDateFormatString("yyyy-MM-dd");

        jDateChooserDF.setDateFormatString("yyyy-MM-dd");

        jLabel5.setText("Data inicio");

        jLabel6.setText("Data fim");

        jLabel7.setText("Hora inicio");

        jLabel8.setText("Hora fim");

        BTGuardar.setText("Guardar");
        BTGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTGuardarActionPerformed(evt);
            }
        });

        BTCancel.setText("Cancelar");
        BTCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDialogPreferenciaLayout = new javax.swing.GroupLayout(jDialogPreferencia.getContentPane());
        jDialogPreferencia.getContentPane().setLayout(jDialogPreferenciaLayout);
        jDialogPreferenciaLayout.setHorizontalGroup(
            jDialogPreferenciaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogPreferenciaLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jDialogPreferenciaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jDialogPreferenciaLayout.createSequentialGroup()
                        .addComponent(BTGuardar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(BTCancel))
                    .addGroup(jDialogPreferenciaLayout.createSequentialGroup()
                        .addGroup(jDialogPreferenciaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addGap(45, 45, 45)
                        .addGroup(jDialogPreferenciaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jDateChooserDF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jDateChooserDI, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTexHIinicio)
                            .addComponent(jTextHF))))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jDialogPreferenciaLayout.setVerticalGroup(
            jDialogPreferenciaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogPreferenciaLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jDialogPreferenciaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jDateChooserDI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(17, 17, 17)
                .addGroup(jDialogPreferenciaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTexHIinicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jDialogPreferenciaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jDateChooserDF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(jDialogPreferenciaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jTextHF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jDialogPreferenciaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BTGuardar)
                    .addComponent(BTCancel))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jDialogConsultarPedidos.setMinimumSize(new java.awt.Dimension(600, 350));

        jTableConsPedidos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Cliente", "Tecnico", "Estado", "Data Estado", "Data Execução ", "Serviço"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTableConsPedidos);
        jTableConsPedidos.getColumnModel().getColumn(0).setMinWidth(0);
        jTableConsPedidos.getColumnModel().getColumn(0).setMaxWidth(0);

        jbVoiltar.setText("Voltar");
        jbVoiltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbVoiltarActionPerformed(evt);
            }
        });

        jbNovoCP.setText("Novo");
        jbNovoCP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNovoCPActionPerformed(evt);
            }
        });

        jbTerminar.setText("Terminar");
        jbTerminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbTerminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDialogConsultarPedidosLayout = new javax.swing.GroupLayout(jDialogConsultarPedidos.getContentPane());
        jDialogConsultarPedidos.getContentPane().setLayout(jDialogConsultarPedidosLayout);
        jDialogConsultarPedidosLayout.setHorizontalGroup(
            jDialogConsultarPedidosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogConsultarPedidosLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jbVoiltar)
                .addGap(65, 65, 65)
                .addComponent(jbNovoCP)
                .addGap(48, 48, 48)
                .addComponent(jbTerminar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialogConsultarPedidosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 536, Short.MAX_VALUE))
        );
        jDialogConsultarPedidosLayout.setVerticalGroup(
            jDialogConsultarPedidosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogConsultarPedidosLayout.createSequentialGroup()
                .addContainerGap(68, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jDialogConsultarPedidosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbVoiltar)
                    .addComponent(jbNovoCP)
                    .addComponent(jbTerminar))
                .addGap(24, 24, 24))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jbEntrar.setText("Novo pedido");
        jbEntrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEntrarActionPerformed(evt);
            }
        });

        jbConsultarPedidos.setText("Consultar Pedidos");
        jbConsultarPedidos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbConsultarPedidosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(139, 139, 139)
                        .addComponent(jbConsultarPedidos))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(150, 150, 150)
                        .addComponent(jbEntrar)))
                .addContainerGap(142, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(115, 115, 115)
                .addComponent(jbEntrar)
                .addGap(18, 18, 18)
                .addComponent(jbConsultarPedidos)
                .addContainerGap(121, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbEntrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEntrarActionPerformed
        jDialogPedido.setVisible(true);
        jDialogPedido.setLocationRelativeTo(this);
        ComboboxCliente();
        ComboboxServicos();
        jTextAreaDescricao.setText("");
        limparTabelaPreferencias();
    }//GEN-LAST:event_jbEntrarActionPerformed

    private void btguardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btguardarActionPerformed
        String cliente = jComboCliente.getSelectedItem().toString();
        int idCliente = 0;
        String servico = jComboTipoServico.getSelectedItem().toString();
        int idServico = 0;
        String descricao = jTextAreaDescricao.getText();
        String[][] horarios;
        String estado = "PRETENDIDO";
        String dataEstado = sdf.format(new Date());
        int idTecnico = 0;
        //validação
        if(cliente.equals("---Cliente---")){
            JOptionPane.showMessageDialog(null, "Seleccione um Cliente");
        }else if(servico.equals("---Servicos---")){
            JOptionPane.showMessageDialog(null, "Seleccione um Tipo de Serviço");
        }else{
            idCliente = selectId("CLIENTE", "NOME_CLIENTE", cliente, "ID_CLIENTE");
            idServico = selectId("TIPO_SERVICOS", "DESCRICAO", servico, "ID_TIPO_SERVICOS");
            int linhas = jTablePreferencias.getRowCount();
            horarios = new String[2][linhas];
            for(int i=0;i<linhas;i++){
                horarios[0][i] = jTablePreferencias.getValueAt(i, 0).toString();
                horarios[1][i] = jTablePreferencias.getValueAt(i, 1).toString();
                if(idTecnico==0){
                    idTecnico = gerarTecnico(horarios[0][i],servico);
                }
            }
            
            try {
                Class.forName("org.apache.derby.jdbc.ClientDriver");
            } catch (ClassNotFoundException e) { //driver não encontrado
                System.err.print("ClassNotFoundException: ");
                System.err.println(e.getMessage());
                System.out.println("O driver expecificado nao foi encontrado.");
            }
            //guardar dados tabela pedido
            try {
                Connection con = DriverManager.getConnection(url);
                String sql = "insert into PEDIDO(ID_CLIENTE,ID_TECNICO,ESTADO,DATA_ESTADO,DATA_HORA_EXECUTAR,DESCRICAO,ID_TIPO_SERVICOS) values "
                        + " ("+idCliente+","+idTecnico+",'"+estado+"','"+dataEstado+"','0','"+descricao+"',"+idServico+")";

                PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
                st.executeUpdate();
                
                st.close();
                con.close();
            } catch (SQLException ex) {
                System.err.println("SQLException: " + ex.getMessage());
            }
            //guardar dados tabela preferencia
            int idPedido = ultimoId("PEDIDO", "ID_PEDIDO");
            for (int i = 0; i < linhas; i++) {
                try {
                    Connection con = DriverManager.getConnection(url);
                    String sql = "insert into PREFERENCIA(ID_PEDIDO,DATA_HORA_INICIO,DATA_HORA_FIM) values "
                            + " (" + idPedido + ",'" + horarios[0][i] + "','" + horarios[1][i] + "')";
                    PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
                    st.executeUpdate();

                    st.close();
                    con.close();
                } catch (SQLException ex) {
                    System.err.println("SQLException: " + ex.getMessage());
                }
            }
            jDialogPedido.setVisible(false);
        }
    }//GEN-LAST:event_btguardarActionPerformed

    private void btcancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btcancelarActionPerformed
        jDialogPedido.setVisible(false);
    }//GEN-LAST:event_btcancelarActionPerformed

    private void btaddhorarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btaddhorarioActionPerformed
        jDialogPedido.setVisible(false);
        jDialogPreferencia.setVisible(true);
        jDialogPreferencia.setLocationRelativeTo(this);
        jTexHIinicio.setText("");
        jTextHF.setText("");
        jDateChooserDI.setDate(new Date());
        jDateChooserDF.setDate(new Date());
    }//GEN-LAST:event_btaddhorarioActionPerformed

    private void BTCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTCancelActionPerformed
        jDialogPreferencia.setVisible(false);
        jDialogPedido.setVisible(true);
        jDialogPedido.setLocationRelativeTo(this);
    }//GEN-LAST:event_BTCancelActionPerformed

    private void BTGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTGuardarActionPerformed
        String datai = (String) sdf.format(jDateChooserDI.getDate());
        String dataF =(String) sdf.format(jDateChooserDF.getDate());
        String horaI = jTexHIinicio.getText();
        String horaF = jTextHF.getText();
        String dataHoraI = datai + "-"+horaI;
        String dataHoraF = dataF + "-"+horaF;
        if(horaI.equals("")){
            JOptionPane.showMessageDialog(null, "Introduza a Hora de Inicio");
        }else if(horaF.equals("")){
            JOptionPane.showMessageDialog(null, "Introduza a Hora de Fim");
        }else{
            model = (DefaultTableModel) jTablePreferencias.getModel();
            model.addRow(new Object[]{dataHoraI,dataHoraF});
            jDialogPedido.setVisible(true);
            jDialogPedido.setLocationRelativeTo(this);
            jDialogPreferencia.setVisible(false);
        }
    }//GEN-LAST:event_BTGuardarActionPerformed

    private void jbConsultarPedidosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbConsultarPedidosActionPerformed
        jDialogConsultarPedidos.setVisible(true);
        jDialogConsultarPedidos.setLocationRelativeTo(this);
        limparTabelaConsPedidos();
        tabelaConsPedidos();
    }//GEN-LAST:event_jbConsultarPedidosActionPerformed

    private void jbVoiltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbVoiltarActionPerformed
        jDialogConsultarPedidos.setVisible(false);
    }//GEN-LAST:event_jbVoiltarActionPerformed

    private void jbNovoCPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNovoCPActionPerformed
        jDialogConsultarPedidos.setVisible(false);
        jDialogPedido.setVisible(true);
        jDialogPedido.setLocationRelativeTo(this);
        ComboboxCliente();
        ComboboxServicos();
        jTextAreaDescricao.setText("");
        limparTabelaPreferencias();
    }//GEN-LAST:event_jbNovoCPActionPerformed

    private void jbTerminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbTerminarActionPerformed
        int linha = jTableConsPedidos.getSelectedRow();
        int idPedido = 0;
        String estado = "EXECUTADO";
        String data = "";
        if(linha == -1){
            JOptionPane.showMessageDialog(null, "Selecione um Pedido");
        } else {
            //perguntar se quer mesmo Terminar
            Object[] option = {"Sim", "Não"};
            int x = JOptionPane.showOptionDialog(null, "Tem a certeza que pretende Terminar?", "",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, option, option[0]);
            if (x == 0) {
                idPedido = Integer.parseInt(jTableConsPedidos.getValueAt(linha, 0).toString());
                data = sdf.format(new Date());
                try {
                    Class.forName("org.apache.derby.jdbc.ClientDriver");
                } catch (ClassNotFoundException e) { //driver não encontrado
                    System.err.print("ClassNotFoundException: ");
                    System.err.println(e.getMessage());
                    System.out.println("O driver expecificado nao foi encontrado.");
                }
                try {
                    Connection con = DriverManager.getConnection(url);
                    String sql = "update PEDIDO set ESTADO='" + estado + "',DATA_ESTADO='" + data + "', DATA_HORA_EXECUTAR='" + data + "' where ID_PEDIDO=" + idPedido;
                    PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
                    st.executeUpdate();

                    st.close();
                    con.close();
                } catch (SQLException ex) {
                    System.err.println("SQLException: " + ex.getMessage());
                }
                limparTabelaConsPedidos();
                tabelaConsPedidos();
            }
        }
    }//GEN-LAST:event_jbTerminarActionPerformed

    
    
    //Funçoes
    private int selectId(String tab, String col, String cam, String colId) {
        int resultId = 0;
        String tabela = tab;
        String coluna = col;
        String campo = cam;
        String colunaId = colId;

        try {
//            Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
//            Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
//            Class.forName("com.mysql.jcbd.Driver");
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException e) { //driver não encontrado
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }
        try {
            con = DriverManager.getConnection(url);
            sql = "select * from " + tabela + " where " + coluna + "='" + campo + "'";

            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            while (rs.next()) {
                resultId = rs.getInt(colunaId);
            }
            st.close();
            con.close();
        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }
        return resultId;
    }
    private String selectString(String tab, String col, int cam, String colNome) {
        String resultString = "";
        String tabela = tab;
        String coluna = col;
        int campo = cam;
        String colunaNome = colNome;

        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException e) { //driver não encontrado
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }
        try {
            con = DriverManager.getConnection(url);
            sql = "select * from " + tabela + " where " + coluna + "=" + campo;

            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            while (rs.next()) {
                resultString = rs.getString(colunaNome);
            }
            st.close();
            con.close();
        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }

        return resultString;
    }
    public void ComboboxCliente(){
        //limpar combo
        jComboCliente.removeAllItems();
        //carregar novos dados
        Set<String> cliente = new HashSet<String>();
        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException e) { //driver não encontrado
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }
        try {
            con = DriverManager.getConnection(url);
            String nomeTabela = "CLIENTE";
            sql = "select * from " + nomeTabela;
            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();

            while (rs.next()) {
                cliente.add(rs.getString("NOME_CLIENTE"));
            }
            st.close();
            con.close();
        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }
        jComboCliente.addItem("---Cliente---");
        Iterator<String> it = cliente.iterator();
        while (it.hasNext()) {
            jComboCliente.addItem(it.next());
        }
        
        
    } 
    public void ComboboxServicos(){
        //limpar combo
        jComboTipoServico.removeAllItems();
        //carregar novos dados
        Set<String> servicos = new HashSet<String>();
        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException e) { //driver não encontrado
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }
        try {
            con = DriverManager.getConnection(url);
            String nomeTabela = "TIPO_SERVICOS";
            sql = "select * from " + nomeTabela;
            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();

            while (rs.next()) {
                servicos.add(rs.getString("DESCRICAO"));
            }
            st.close();
            con.close();
        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }
        jComboTipoServico.addItem("---Servicos---");
        Iterator<String> it = servicos.iterator();
        while (it.hasNext()) {
            jComboTipoServico.addItem(it.next());
        }
        
        
    } 
    public void limparTabelaPreferencias(){
        model = (DefaultTableModel) jTablePreferencias.getModel();
        int linhas = model.getRowCount();
        for (int i = 0;i<linhas;i++){
            model.removeRow(0);
        }
    }
    public void limparTabelaConsPedidos(){
        model = (DefaultTableModel) jTableConsPedidos.getModel();
        int linhas = model.getRowCount();
        for (int i = 0;i<linhas;i++){
            model.removeRow(0);
        }
    }
    public void tabelaConsPedidos(){
        int idPedido = 0;
        int idCliente = 0;
        String cliente = "";
        int idTecnico = 0;
        String tecnico = "";
        String estado ="";
        String dataEstado = "";
        String dataExecucao = "";
        int idServico = 0;
        String servico = "";
       //carregar novos dados
        
        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException e) { //driver não encontrado
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }
        try {
            con = DriverManager.getConnection(url);
            sql = "select * from PEDIDO" ;
            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();

            while (rs.next()) {
                idPedido = rs.getInt("ID_PEDIDO");
                idCliente = rs.getInt("ID_CLIENTE");
                cliente = selectString("CLIENTE", "ID_CLIENTE", idCliente, "NOME_CLIENTE");
                idTecnico = rs.getInt("ID_TECNICO");
                tecnico = selectString("TECNICO", "ID_TECNICO", idTecnico, "NOME_TECNICO");
                estado = rs.getString("ESTADO");
                dataEstado = rs.getString("DATA_ESTADO");
                dataExecucao = rs.getString("DATA_HORA_EXECUTAR");
                idServico = rs.getInt("ID_TIPO_SERVICOS");
                servico = selectString("TIPO_SERVICOS", "ID_TIPO_SERVICOS", idServico, "DESCRICAO");
                model.addRow(new Object[]{idPedido,cliente,tecnico,estado,dataEstado,dataExecucao,servico});
            }
            st.close();
            con.close();
        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }
        
        
        
    } 
    private int gerarTecnico(String d, String serv){
        int id = 0;
        int idTecnico = 0;
        int idEsp = 0;
        String[] data = d.split("-"); //yyyy-MM-dd-hh-mm
        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException e) { //driver não encontrado
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }
        try {
            Connection con = DriverManager.getConnection(url);
            sql = "select * from ESPECIALIDADE where NOME_ESPECIALIDADE='"+serv+"'";

            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            while (rs.next()) {
                idEsp = rs.getInt("ID_ESPECIALIDADE");
            }
            st.close();
            con.close();
        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }
        System.out.println(""+idEsp);
        try {
            Connection con = DriverManager.getConnection(url);
            sql = "select * from TECNICO where ID_ESPECIALIDADE="+idEsp;

            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            while (rs.next()) {
                idTecnico = rs.getInt("ID_TECNICO");
                String a = selectString("ATRIBUICAO_HORARIO", "ID_TECNICO", idTecnico, "DATA_INICIO");
                String b = selectString("ATRIBUICAO_HORARIO", "ID_TECNICO", idTecnico, "DATA_FIM");
                String[] dataInicio = a.split("-");
                String[] dataFim = b.split("-");
                if (id == 0) {
                    int dataAno = Integer.parseInt(data[0]);
//                    int dataMes = Integer.parseInt(data[1]);
//                    int dataDia = Integer.parseInt(data[2]);
                    int dataIAno = Integer.parseInt(dataInicio[0]);
//                    int dataIMes = Integer.parseInt(dataInicio[1]);
//                    int dataIDia = Integer.parseInt(dataInicio[2]);
                    int dataFAno = Integer.parseInt(dataFim[0]);
//                    int dataFMes = Integer.parseInt(dataFim[1]);
//                    int dataFDia = Integer.parseInt(dataFim[2]);
                    if ((dataAno >= dataIAno) && (dataAno <= dataFAno)) {
                        
                        id = idTecnico;
                    }
                }
            }
            st.close();
            con.close();
        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }
        return id;
    }
    private int ultimoId(String tab, String id) {
        String tabela = tab;
        String nomeId = id;
        int cont = 0;
        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException e) { //driver não encontrado
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }
        try {
            con = DriverManager.getConnection(url);
            sql = "select * from " + tabela;

            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            while (rs.next()) {
                cont = rs.getInt(nomeId);
            }
            st.close();
            con.close();
        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }
        return cont;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(es_protot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(es_protot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(es_protot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(es_protot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new es_protot().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BTCancel;
    private javax.swing.JButton BTGuardar;
    private javax.swing.JButton btaddhorario;
    private javax.swing.JButton btcancelar;
    private javax.swing.JButton btguardar;
    private javax.swing.JComboBox jComboCliente;
    private javax.swing.JComboBox jComboTipoServico;
    private com.toedter.calendar.JDateChooser jDateChooserDF;
    private com.toedter.calendar.JDateChooser jDateChooserDI;
    private javax.swing.JDialog jDialogConsultarPedidos;
    private javax.swing.JDialog jDialogPedido;
    private javax.swing.JDialog jDialogPreferencia;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTableConsPedidos;
    private javax.swing.JTable jTablePreferencias;
    private javax.swing.JTextField jTexHIinicio;
    private javax.swing.JTextArea jTextAreaDescricao;
    private javax.swing.JTextField jTextHF;
    private javax.swing.JButton jbConsultarPedidos;
    private javax.swing.JButton jbEntrar;
    private javax.swing.JButton jbNovoCP;
    private javax.swing.JButton jbTerminar;
    private javax.swing.JButton jbVoiltar;
    // End of variables declaration//GEN-END:variables
}
